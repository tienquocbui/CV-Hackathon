from flask import Flask, render_template_string, send_file, jsonify
from docx import Document
import mammoth
import os

app = Flask(__name__)

# # Function to convert DOCX to HTML using Mammoth
# def docx_to_html(docx_path):
#     # Convert DOCX to HTML using LibreOffice headless mode
#     os.system(f"libreoffice --headless --convert-to html {docx_path}")

#     # Return the HTML path generated by LibreOffice
#     html_path = docx_path.replace('.docx', '.html')
#     return html_path

# @app.route('/generate')
# def generate_cv():
#     # # Generate DOCX file
#     # generate_docx()

#     # Convert the DOCX to HTML
#     html_content = docx_to_html('output_cv.docx')

#     # Send the HTML content back to the client
#     return jsonify({'html': html_content})

# Function to convert DOCX to HTML using LibreOffice (headless)
def docx_to_html(docx_path):
    output_html_path = docx_path.replace('.docx', '.html')
    
    # Ensure the DOCX file exists before proceeding
    if not os.path.exists(docx_path):
        raise FileNotFoundError(f"Input DOCX file not found: {docx_path}")

    # Convert DOCX to HTML using LibreOffice headless mode
    os.system(f"/Applications/LibreOffice.app/Contents/MacOS/soffice --headless --convert-to html {docx_path}")

    # Check if the HTML file was created
    if not os.path.exists(output_html_path):
        raise FileNotFoundError(f"Failed to generate HTML file: {output_html_path}")

    # Return the path to the generated HTML file
    return output_html_path

    # # Convert DOCX to HTML using LibreOffice headless mode
    # os.system(f"libreoffice --headless --convert-to html {docx_path}")

    # # Return the HTML path generated by LibreOffice
    # html_path = docx_path.replace('.docx', '.html')
    # return html_path

@app.route('/generate')
def generate_cv():
    docx_path = 'output_cv.docx'
    html_file = docx_to_html(docx_path)
    # Check if the DOCX file exists
    if os.path.exists(docx_path):
        # Convert the DOCX to HTML
        html_content = docx_to_html(docx_path)

    #     # Return the raw HTML content to be rendered in the frontend
    #     return render_template_string(html_content)
    # else:
    #     return "File not found", 404
            # Read the HTML content from the file
        with open(html_file, 'r') as file:
            html_content = file.read()

        # Return the HTML content directly for rendering in the browser
        return jsonify({'html': html_content})
    else:
        return jsonify({"error": "File not found"}), 404

@app.route('/')
def index():
    return send_file('index.html')

if __name__ == '__main__':
    app.run(debug=True)
    app.config['WTF_CSRF_ENABLED'] = False

